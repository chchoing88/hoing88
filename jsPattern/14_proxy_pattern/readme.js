/**
 * 프록시 패턴
 * 
 * 클라이언트 사용 패턴에 따라 데이터를 선취한다.
 * 실체에 클라이언트 요청이 과도하게 몰리지 않게 한다. 브라우저에서 마우스를 이동하거나 창 크기를 조절하는
 * 등의 이벤트에 반응하는, 비용이 비교적 비싼 작업들을 수행할때가 그렇다. 이론적으로는 이벤트마다 
 * 개별처리를 해야하지만 그렇게 하면 실제로 애플리케이션 성능이 매우 떨어진다.
 * 디바운싱 프로시를 쓰면 수 밀리초에 한번만 반응하도록 제한할수 있다. 
 * 클라이언트가 접근하면 안되는 자원을 통제한다.
 * http 요청 n개를 하나로 묶어 n-1개 요청에 따른 고정비용을 줄인다.
 * 
 * 
 * 여기서는 컨퍼런스 참가자 명단에서 현재 페이지의 참가자중 가장 접근 횟수가 많은 프로필만이라도 미리 가져오자는 취지다.
 * 시간이 지나면서 쌓은 프로필 클릭 횟수에 따라 누가 유명인사인지 시스템이 알아서
 * 학습하도록 놔두고 그 사람들 프로필만 선취하면 될듯 하다.
 * 
 * attendeeProfileService는 참가자 프로필을 가져올수있는 객체를 반환한다. 
 * attendeeProfileProxy 는 참가자들 (attendees)와 위에서 말했던 인스턴스 ( profileService )와 perfetchLimit 라는 몇명까지의 제안된 값
 * 을 인자로 받는다. 
 *
 * attendeeProfileProxy 안에서는 실제 profileService 객체를 이용해서 몇몇 프로필을 선취하고 없는 프로필에 대해서는
 * 다시 profileService 를 호출해서 반환하게 한다. 
 */